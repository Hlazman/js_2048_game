{"version":3,"sources":["scripts/main.js"],"names":["score","document","querySelector","start","message","row","querySelectorAll","cells","styleCells","regx","RegExp","forEach","item","innerText","classList","contains","className","replace","add","animateCells","animate","style","transform","transition","setTimeout","randomCell","min","max","Math","floor","random","finish","every","addCellNumber","number","index","gameOver","canMove","arr","i","children","remove","congratulation","some","cellsSorting","direction","gameArr","cellArr","k","push","splice","length","empty","indexOf","lastIndexOf","includes","unshift","movingDirection","of","to","next","prev","moveUp","moveDown","moveLeft","moveRight","addEventListener","e","preventDefault","key"],"mappings":"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","file":"main.f7be7b56.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game-score');\nconst start = document.querySelector('.start');\nconst message = document.querySelector('.message-container');\nconst row = document.querySelectorAll('.field-row');\nconst cells = document.querySelectorAll('.field-cell');\n\nconst styleCells = () => {\n  const regx = new RegExp('\\\\b' + 'field-cell--' + '[^ ]*[ ]?\\\\b', 'g');\n\n  cells.forEach(item => {\n    if (item.innerText === ''\n    || !item.classList.contains(`field-cell--${item.innerText}`)) {\n      item.className = item.className.replace(regx, '');\n    }\n\n    if (item.innerText !== '') {\n      item.classList.add(`field-cell--${item.innerText}`);\n    }\n  });\n};\n\nconst animateCells = (item, animate, newOne = false) => {\n  const scaleTo = 'scale(1.2,1.2)';\n  const defaultScale = 'scale(1,1)';\n  const transition = '.3s transform';\n\n  if (animate) {\n    item.style.transform = scaleTo;\n    item.style.transition = transition;\n  } else {\n    item.style.transform = defaultScale;\n  }\n\n  setTimeout(() => {\n    item.style.transform = defaultScale;\n  }, 200);\n};\n\nconst randomCell = (min, max) => {\n  return Math.floor(min + Math.random() * (max + 1 - min));\n};\n\nconst finish = () => {\n  return [...cells].every(item => item.innerText !== '');\n};\n\nconst addCellNumber = () => {\n  if (finish() === false) {\n    const number = Math.random() > 0.9 ? 4 : 2;\n    let index = randomCell(0, 15);\n\n    if (cells[index].innerText) {\n      while (cells[index].innerText !== '') {\n        index = randomCell(0, 15);\n      }\n    }\n    cells[index].innerText = number;\n  }\n};\n\nconst gameOver = () => {\n  let canMove = false;\n\n  [...row].forEach((item, index, arr) => {\n    for (let i = 0; i <= 3; i++) {\n      if (!arr[index].children[i + 1] || !arr[i + 1]) {\n        break;\n      }\n\n      if (arr[index].children[i].innerText\n        === arr[index].children[i + 1].innerText\n        || arr[i].children[index].innerText\n        === arr[i + 1].children[index].innerText) {\n        canMove = true;\n\n        return;\n      }\n    }\n  });\n\n  if (!canMove) {\n    message.children[0].classList.remove('hidden');\n  }\n};\n\nconst congratulation = () => {\n  const winner = [...cells].some(item => item.innerText >= 2048);\n\n  if (winner) {\n    message.children[1].classList.remove('hidden');\n  }\n};\n\nconst cellsSorting = (direction) => {\n  const gameArr = [];\n  const cellArr = [];\n\n  for (let i = 0; i <= 3; i++) {\n    for (let k = 0; k <= 3; k++) {\n      if (direction === 'up' || direction === 'down') {\n        cellArr.push(row[k].children[i].innerText);\n      } else {\n        cellArr.push(row[i].children[k].innerText);\n      }\n    }\n    gameArr.push([...cellArr]);\n    cellArr.splice(0, 4);\n  }\n\n  for (let i = 0; i <= gameArr.length - 1; i++) {\n    for (let k = gameArr.length - 1; k >= 0; k--) {\n      const empty = '';\n      let index;\n\n      if (direction === 'up' || direction === 'left') {\n        index = gameArr[i].indexOf('');\n      } else {\n        index = gameArr[i].lastIndexOf('');\n      }\n\n      if (gameArr[i].includes('')) {\n        gameArr[i].splice(index, 1);\n\n        if (direction === 'up' || direction === 'left') {\n          index = gameArr[i].push(empty);\n        } else {\n          index = gameArr[i].unshift(empty);\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i <= 3; i++) {\n    row.forEach((item, index) => {\n      if (direction === 'up' || direction === 'down') {\n        item.children[i].innerText = gameArr[i][index];\n      } else {\n        item.children[i].innerText = gameArr[index][i];\n      }\n    });\n  }\n\n  gameArr.splice(0, 4);\n};\n\nconst movingDirection = (direction, of, to) => {\n  let next;\n  let prev;\n\n  if (direction === 'UP' || direction === 'RIGHT') {\n    next = to + 1;\n    prev = to - 1;\n  }\n\n  if (direction === 'DOWN' || direction === 'LEFT') {\n    next = to - 1;\n    prev = to + 1;\n  }\n\n  if (direction === 'UP' || direction === 'DOWN') {\n    if (row[to].children[of].innerText.length\n      && row[to].children[of].innerText === row[next].children[of].innerText) {\n      row[to].children[of].innerText = row[to].children[of].innerText * 2;\n      row[next].children[of].innerText = '';\n      score.innerText = +score.innerText + +row[to].children[of].innerText;\n      animateCells(row[to].children[of], true);\n\n      if (row[prev] && row[prev].children[of].innerText === '') {\n        animateCells(row[to].children[of], false);\n        animateCells(row[prev].children[of], true);\n      }\n    }\n  }\n\n  if (direction === 'LEFT' || direction === 'RIGHT') {\n    if (row[of].children[to].innerText.length\n      && row[of].children[to].innerText === row[of].children[next].innerText) {\n      row[of].children[to].innerText = row[of].children[to].innerText * 2;\n      row[of].children[next].innerText = '';\n      score.innerText = +score.innerText + +row[of].children[to].innerText;\n      animateCells(row[of].children[to], true);\n\n      if (row[of].children[next].innerText === '') {\n        animateCells(row[of].children[to], false);\n        animateCells(row[of].children[next], true);\n      }\n    }\n  }\n};\n\nconst moveUp = () => {\n  cellsSorting('up');\n\n  for (let i = 0; i <= 3; i++) {\n    for (let k = 0; k <= 3; k++) {\n      if (!row[k + 1]) {\n        break;\n      };\n\n      movingDirection('UP', i, k);\n    }\n  }\n\n  cellsSorting('up');\n};\n\nconst moveDown = () => {\n  cellsSorting('down');\n\n  for (let i = 3; i >= 0; i--) {\n    for (let k = 3; k >= 0; k--) {\n      if (!row[k - 1]) {\n        break;\n      };\n\n      movingDirection('DOWN', i, k);\n    }\n  }\n\n  cellsSorting('down');\n};\n\nconst moveLeft = () => {\n  cellsSorting('left');\n\n  for (let i = 0; i <= 3; i++) {\n    for (let k = 3; k >= 0; k--) {\n      if (!row[i].children[k - 1]) {\n        break;\n      };\n\n      movingDirection('LEFT', i, k);\n    }\n  }\n\n  cellsSorting('left');\n};\n\nconst moveRight = () => {\n  cellsSorting('right');\n\n  for (let i = 0; i <= 3; i++) {\n    for (let k = 0; k <= 3; k++) {\n      if (!row[i].children[k + 1]) {\n        break;\n      };\n\n      movingDirection('RIGHT', i, k);\n    }\n  }\n\n  cellsSorting('right');\n};\n\nstart.addEventListener('click', () => {\n  cells.forEach(item => {\n    item.innerText = '';\n  });\n  addCellNumber();\n  addCellNumber();\n  styleCells();\n  start.innerText = 'Restart';\n  score.innerText = 0;\n  start.classList.add('restart');\n  start.classList.remove('start');\n\n  [...message.children].forEach(item => {\n    item.classList.add('hidden');\n  });\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (start.classList.contains('restart')) {\n    switch (e.key) {\n      case 'ArrowUp':\n        moveUp();\n        break;\n\n      case 'ArrowDown':\n        moveDown();\n        break;\n\n      case 'ArrowRight':\n        moveRight();\n        break;\n\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n    }\n    addCellNumber();\n    styleCells();\n    congratulation();\n\n    if (finish() === true) {\n      gameOver();\n    }\n  }\n});\n"]}